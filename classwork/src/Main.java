import java.util.Scanner;

public class Main extends Prints {
    /**
      –í—ã–∫–ª—é—á–∞—Ç–µ–ª—å
     */
    private static boolean ON = true;
    /**
     * –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
     */
    public static int Choice = 0;

    /**
     * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
     */
    public static void main(String[] args) {
        int a = 0, b = 0;
        var sc = new Scanner(System.in);
        while (ON) {
            println("""
                    –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\s
                     1. +
                     2. -
                     3. √ó
                     4. √∑
                     5. a^b
                     6 - –í—ã—Ö–æ–¥""");
            print("—è –≤—ã–±–∏—Ä–∞—é –¥–µ–π—Å—Ç–≤–∏–µ....");
            Choice = sc.nextInt();
            if (Choice == 6){
                println("–±–± —é–∑–µ—Ä üëã");
                ON = !ON;
                return;
                //–≤–æ—Ç —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏........
            }
            print("a = ");
            a = sc.nextInt();
            System.out.print("b = ");
            b = sc.nextInt();
            switch (Choice) {
                case 1:
                    System.out.println("a + b = ");
                    println(Summing(a, b));
                    break;
                case 2:
                    println("a - b = ");
                    print(Substracting(a, b));
                    break;
                case 3:
                    println("a √ó b = "+Multiplying(a, b));
                    break;
                case 4:
                    System.out.printf("\na √∑ b = %s\n", Dividing(a,b));
                    break;
                case 5:
                    println("a^b ="+ Math.pow(a, b));
                    break;
            }
        }
    }

    /**
     * –°–ª–æ–∂–µ–Ω–∏–µ
     * @param a –°–ª–∞–≥–∞–µ–º–æ–µ 1
     * @param b –°–ª–∞–≥–∞–µ–º–æ–µ 2
     * @return –°—É–º–º—É
     */
    public static double Summing(double a, double b) {
        return a + b;
    }

    /**
     * –í—ã—á–∏—Ç–∞–Ω–∏–µ
     * @param a –£–º–µ–Ω—å—à–∞–µ–º–æ–µ
     * @param b –í—ã—á–∏—Ç–∞–µ–º–æ–µ
     * @return –†–∞–∑–Ω–æ—Å—Ç—å
     */
    static double Substracting(double a, double b) {
        return a - b;
    }

    /**
     * –î–µ–ª–µ–Ω–∏–µ
     * @param a –î–µ–ª–∏–º–æ–µ
     * @param b –î–µ–ª–∏—Ç–µ–ª—å
     * @return –ß–∞—Å—Ç–Ω–æ–µ
     */
    private static double Dividing(double a, double b) {
        return a / b;
    }

    /**
     * –£–º–Ω–æ–∂–µ–Ω–∏–µ
     * @param a –ú–Ω–æ–∂–∏—Ç–µ–ª—å 1
     * @param b –ú–Ω–æ–∂–∏—Ç–µ–ª—å 2
     * @return –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
     */
    static double Multiplying(double a, double b) {
        return a * b;
    }
}
